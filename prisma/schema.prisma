generator client {
  provider = "prisma-client-js"
}

datasource db {
  // If you later switch to PostgreSQL, just change the provider and URL.
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/* ─────────────────────────  MAIN ENTITIES  ───────────────────────── */

model Keyword {
  id        Int        @id @default(autoincrement())
  term      String     @unique
  snapshots Snapshot[]
}

model Snapshot {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  keyword    Keyword    @relation(fields: [keywordId], references: [id])
  keywordId  Int
  serpItems  SerpItem[]
}

/* ─────────────────────────  SEARCH RESULTS  ─────────────────────────
   Each SerpItem belongs to ONE snapshot, but we also store keywordId so
   we can enforce a (keyword, url) uniqueness constraint.  This makes it
   possible to “upsert” the same URL on every update and keep the user’s
   sentiment / control values.
───────────────────────────────────────────────────────────────────────*/
model SerpItem {
  id          Int      @id @default(autoincrement())

  /*  relations  */
  snapshot    Snapshot @relation(fields: [snapshotId], references: [id], onDelete: Cascade)
  snapshotId  Int
  keywordId   Int      // duplicated for @@unique constraint (set below)

  /*  SERP data  */
  rank        Int
  title       String
  url         String
  domain      String
  serpFeature String

  /*  User-controlled fields – persist between snapshots  */
  sentiment   String   @default("NEUTRAL")  // POSITIVE | NEUTRAL | NEGATIVE
  hasControl  Boolean  @default(false)      // true  = “We control this URL”

  /*  (keywordId, url) must be unique, regardless of snapshot  */
  @@unique([keywordId, url], name: "keyword_url_unique")
}
